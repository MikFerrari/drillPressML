function output = extrFeatFromBuffers_NorP(x,step,fs)
    
    
    % Time step
    ti = x.time(1);
    tf = x.time(end);
    step = seconds(step);
    
    % Frequency upper boundary
    freqThres = 55;     % Hz         

    output = [];

    aFE = audioFeatureExtractor( ...
        "SampleRate",fs, ...
        "FFTLength", [], ...
        "OverlapLength",round(0.02*fs), ...
        "spectralCentroid",true, ...
        "spectralCrest",true, ...
        "spectralDecrease",true, ...
        "spectralEntropy",true, ...
        "spectralFlatness",true, ...
        "spectralFlux",true, ...
        "spectralKurtosis",true, ...
        "spectralRolloffPoint",true, ...
        "spectralSkewness",true, ...
        "spectralSlope",true, ...
        "spectralSpread",true);
    setExtractorParams(aFE,"linearSpectrum","FrequencyRange",[0 freqThres]);
    
    feature_idx = info(aFE);
    feature_names = fields(feature_idx);
    feature_names = cellfun(@(x) replace(x,'spectral',''),feature_names,'UniformOutput',false);
    feature_names = cellfun(@(x) [lower(x(1)) x(2:end)],feature_names,'UniformOutput',false);
    
    % Divide the timetable in buffers and extract features from each one
    while (ti+step) <= tf
        tr = timerange(ti,ti+step);
        record = x(tr,:);

        features_ax_top = extract(aFE,record.ax_top);
        features_ay_top = extract(aFE,record.ay_top);
        features_az_top = extract(aFE,record.az_top);

        output = [output; ...
                  rms(features_ax_top) ...
                  rms(features_ay_top) ...
                  rms(features_az_top) ...
                  ...
                  max(abs(record.ax_top)) ...
                  max(abs(record.ay_top)) ...
                  max(abs(record.az_top)) ...
                  ...
                  std(record.ax_top) ...
                  std(record.ay_top) ...
                  std(record.az_top) ...
                  ];

        ti = ti+step;

    end

    output = array2table(output);
    output.Properties.VariableNames = [strcat('rms_',feature_names,'_ax'); ...
                                       strcat('rms_',feature_names,'_ay'); ...
                                       strcat('rms_',feature_names,'_az'); ...
                                       'amplitude_ax';'amplitude_ay';'amplitude_az'; ...
                                       'std_ax';'std_ay';'std_az'];

    % Add labels column
    % velocity label
    v = repmat(x.label(1),size(output,1),1);
    
    % load label ('N' or 'P')
    c = char(x.label(1));
    lab = c(4);
    lab = categorical(cellstr(lab));
    t = repmat(lab,size(output,1),1);
    
    output = [output array2table(v) array2table(t)];
    output.Properties.VariableNames{end-1} = 'velocity';
    output.Properties.VariableNames{end} = 'loadLabel';
        
end