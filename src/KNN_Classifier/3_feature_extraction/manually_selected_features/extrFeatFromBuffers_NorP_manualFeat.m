function output = extrFeatFromBuffers_NorP(x,step,fs)
    
    % Time step
    ti = x.time(1);
    tf = x.time(end);
    step = seconds(step);
    
    % Frequency upper boundary
    freqThres = 55;     % Hz         
    
    % Spectrogram parameters
%     f_min = 0;           % Hz
%     f_max = freqThres;   % Hz
%     frequencyLimits = [f_min f_max];
%     leakage = 0.3;
%     overlapPercent = 50;

    output = [];

    % Divide the timetable in buffers and extract features from each one
    while (ti+step) <= tf
        tr = timerange(ti,ti+step);
        record = x(tr,:);

        [pwelX,f_pwelX] = pwelch(record.ax_top,[],[],[],fs);
        [pwelY,f_pwelY] = pwelch(record.ay_top,[],[],[],fs);
        [pwelZ,f_pwelZ] = pwelch(record.az_top,[],[],[],fs);

        [f_fftX,fftX] = onesidedFFT(record.ax_top,fs);
        [f_fftY,fftY] = onesidedFFT(record.ay_top,fs);
        [f_fftZ,fftZ] = onesidedFFT(record.az_top,fs);

%         [pX,fX,tX] = pspectrum(record.ax_top,fs, ...
%                                'spectrogram', ...
%                                'FrequencyLimits',frequencyLimits, ...
%                                'Leakage',leakage, ...
%                                'OverlapPercent',overlapPercent);
%         [pY,fY,tY] = pspectrum(record.ay_top,fs, ...
%                                'spectrogram', ...
%                                'FrequencyLimits',frequencyLimits, ...
%                                'Leakage',leakage, ...
%                                'OverlapPercent',overlapPercent);
%         [pZ,fZ,tZ] = pspectrum(record.az_top,fs, ...
%                                'spectrogram', ...
%                                'FrequencyLimits',frequencyLimits, ...
%                                'Leakage',leakage, ...
%                                'OverlapPercent',overlapPercent);

%         entrX = pentropy(record.ax_top,fs);
%         entrY = pentropy(record.ay_top,fs);
%         entrZ = pentropy(record.az_top,fs);
% 
%         instfX = instfreq(record.ax_top,fs);
%         instfY = instfreq(record.ay_top,fs);
%         instfZ = instfreq(record.az_top,fs);

%         frf = frequencyresponse(record(:,1:end-1).Variables,fs,freqThres,'abs');
% 
%         frf_R = frequencyresponse(record(:,1:end-1).Variables,fs,freqThres,'real');
% 
%         frf_I = frequencyresponse(record(:,1:end-1).Variables,fs,freqThres,'imag');

        output = [output; ...
              mean(pwelX(f_pwelX < freqThres)) ...
              mean(pwelY(f_pwelY < freqThres)) ...
              mean(pwelZ(f_pwelZ < freqThres)) ...
              ...
              rms(pwelX(f_pwelX < freqThres)) ...
              rms(pwelY(f_pwelY < freqThres)) ...
              rms(pwelZ(f_pwelZ < freqThres)) ...
              ...
              std(pwelX(f_pwelX < freqThres)) ...
              std(pwelY(f_pwelY < freqThres)) ...
              std(pwelZ(f_pwelZ < freqThres)) ...
              ...
              mean(fftX(f_fftX < freqThres)) ...
              mean(fftY(f_fftY < freqThres)) ...
              mean(fftZ(f_fftZ < freqThres)) ...
              ...
              max(record.ax_top) ...
              max(record.ay_top) ...
              max(record.az_top) ...
              ...
              std(record.ax_top) ...
              std(record.ay_top) ...
              std(record.az_top) ...
              ];

%         output = [output; ...
%               ...
%               mean(pwelX(f_pwelX < freqThres)) ...
%               mean(pwelY(f_pwelY < freqThres)) ...
%               mean(pwelZ(f_pwelZ < freqThres)) ...
%               ...
%               rms(pwelX(f_pwelX < freqThres)) ...
%               rms(pwelY(f_pwelY < freqThres)) ...
%               rms(pwelZ(f_pwelZ < freqThres)) ...
%               ...
%               std(pwelX(f_pwelX < freqThres)) ...
%               std(pwelY(f_pwelY < freqThres)) ...
%               std(pwelZ(f_pwelZ < freqThres)) ...
%               ...
%               mean(fftX(f_fftX < freqThres)) ...
%               mean(fftY(f_fftY < freqThres)) ...
%               mean(fftZ(f_fftZ < freqThres)) ...
%               ...
%               std(record.ax_top) ...
%               std(record.ay_top) ...
%               std(record.az_top) ...
%               ];

        ti = ti+step;

    end

    output = array2table(output);
    output.Properties.VariableNames = {'meanPsd_ax','meanPsd_ay','meanPsd_az', ...
                                       'rmsPsd_ax','rmsPsd_ay','rmsPsd_az', ...
                                       'stdPsd_ax','stdPsd_ay','stdPsd_az', ...
                                       'meanFft_ax','meanFft_ay','meanFft_az', ...
                                       'max_ax_top','max_ay_top','max_az_top', ...
                                       'std_ax_top','std_ay_top','std_az_top' ...
                                       };
    
%     output.Properties.VariableNames = {'meanPsd_ax','meanPsd_ay','meanPsd_az', ...
%                                        'rmsPsd_ax','rmsPsd_ay','rmsPsd_az', ...
%                                        'stdPsd_ax','stdPsd_ay','stdPsd_az', ...
%                                        'meanFft_ax','meanFft_ay','meanFft_az', ...
%                                        'std_ax_top','std_ay_top','std_az_top' ...
%                                        };

    % Add labels column
    % velocity label
    v = repmat(x.label(1),size(output,1),1);
    
    % load label ('N' or 'P')
    c = char(x.label(1));
    lab = c(4);
    lab = categorical(cellstr(lab));
    t = repmat(lab,size(output,1),1);
    
    output = [output array2table(v) array2table(t)];
    output.Properties.VariableNames{end-1} = 'velocity';
    output.Properties.VariableNames{end} = 'loadLabel';
        
end