numFeatures = size(XTrain3SD,1);  % tutte le feaures in input
numResponses = 2; % output = N o P
numHiddenUnits = 30;
layersNorP = [ ...
    sequenceInputLayer(numFeatures,'Name','Input')
    lstmLayer(numHiddenUnits,'Name','Hidden')
    dropoutLayer(0.4,'Name','Dropout') 
    fullyConnectedLayer(numResponses)
    softmaxLayer('Name','SoftMax')
    classificationLayer('Name','Output')
    ];

optionsNorP = trainingOptions('adam', ...
    'MaxEpochs',40,...
    'InitialLearnRate',0.001, ...
    'GradientThreshold', 1, ...
    'ExecutionEnvironment',"auto",...
    'plots','training-progress', ...
    'ValidationData',{XTest3SD,YTest3NorP}, ... %utilizzo come validation set quello di test, per vedere direttamente l'accuracy in test
    'ValidationFrequency',1, ... 
    'Verbose',false);

netNorP = trainNetwork(XTrain3SD,YTrain3NorP,layersNorP,optionsNorP); %alleno la rete

%     'LearnRateSchedule','piecewise', ...
%     'LearnRateDropFactor',0.1, ...
%     'LearnRateDropPeriod',5, ...